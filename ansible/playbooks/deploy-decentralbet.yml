---
- name: Deploy DecentralBet Application to AKS
  hosts: localhost
  gather_facts: no
  vars:
    kubernetes_namespace: decentralbet
    app_version: "{{ version | default('latest') }}"
    
  tasks:
    - name: Display deployment information
      debug:
        msg: "Deploying DecentralBet v{{ app_version }} to {{ environment }} environment"
        
    - name: Create Kubernetes namespace
      kubernetes.core.k8s:
        name: "{{ kubernetes_namespace }}"
        api_version: v1
        kind: Namespace
        state: present
        
    - name: Apply ConfigMap
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: decentralbet-config
            namespace: "{{ kubernetes_namespace }}"
          data:
            NODE_ENV: "{{ environment }}"
            LOG_LEVEL: "{{ log_level | default('info') }}"
            CORS_ORIGIN: "{{ frontend_url }}"
            API_PREFIX: "/api/v1"
            
    - name: Apply Secrets
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: decentralbet-secrets
            namespace: "{{ kubernetes_namespace }}"
          type: Opaque
          data:
            JWT_SECRET: "{{ jwt_secret | b64encode }}"
            MONGODB_URI: "{{ mongodb_uri | b64encode }}"
            ETHEREUM_RPC_URL: "{{ ethereum_rpc_url | b64encode }}"
            PRIVATE_KEY: "{{ private_key | b64encode }}"
            
    - name: Deploy Backend Application
      kubernetes.core.k8s:
        state: present
        src: "{{ playbook_dir }}/../../k8s/backend.yaml"
        
    - name: Deploy Frontend Application
      kubernetes.core.k8s:
        state: present
        src: "{{ playbook_dir }}/../../k8s/frontend.yaml"
        
    - name: Deploy Ingress
      kubernetes.core.k8s:
        state: present
        src: "{{ playbook_dir }}/../../k8s/ingress.yaml"
        
    - name: Wait for backend deployment to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: backend
        namespace: "{{ kubernetes_namespace }}"
        wait_condition:
          type: Progressing
          status: "True"
          reason: NewReplicaSetAvailable
        wait_timeout: 300
        
    - name: Wait for frontend deployment to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: frontend
        namespace: "{{ kubernetes_namespace }}"
        wait_condition:
          type: Progressing
          status: "True"
          reason: NewReplicaSetAvailable
        wait_timeout: 300
        
    - name: Get service information
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        namespace: "{{ kubernetes_namespace }}"
      register: services
      
    - name: Display deployment status
      debug:
        msg: "Deployment completed successfully. Services: {{ services.resources | map(attribute='metadata.name') | list }}"

---
- name: Configure Node Security and Updates
  hosts: aks_cluster
  become: yes
  vars:
    update_packages: true
    install_monitoring: true
    
  tasks:
    - name: Update system packages
      apt:
        update_cache: yes
        upgrade: dist
        autoremove: yes
        autoclean: yes
      when: update_packages | bool
      
    - name: Install security updates
      apt:
        name: unattended-upgrades
        state: present
        
    - name: Configure automatic security updates
      template:
        src: templates/50unattended-upgrades.j2
        dest: /etc/apt/apt.conf.d/50unattended-upgrades
        
    - name: Install monitoring agent
      package:
        name: "{{ item }}"
        state: present
      loop:
        - prometheus-node-exporter
        - collectd
      when: install_monitoring | bool
      
    - name: Configure firewall rules
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - "22"    # SSH
        - "80"    # HTTP
        - "443"   # HTTPS
        - "6443"  # Kubernetes API
        - "10250" # Kubelet API
        - "9100"  # Node Exporter
        
    - name: Enable firewall
      ufw:
        state: enabled
        policy: deny
        direction: incoming

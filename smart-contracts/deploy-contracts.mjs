import { ethers } from 'ethers';

async function main() {
  // Connect to local Hardhat node
  const provider = new ethers.JsonRpcProvider('http://localhost:8545');
  
  // Use the first account as deployer (should have 10000 ETH from Hardhat)
  const deployer = new ethers.Wallet(
    '0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80',
    provider
  );
  
  console.log('🚀 Deploying contracts...');
  console.log('Deployer address:', deployer.address);
  
  // Check balance
  const balance = await provider.getBalance(deployer.address);
  console.log('Deployer balance:', ethers.formatEther(balance), 'ETH');
  
  // Deploy MockUSDC
  console.log('\n📄 Deploying MockUSDC...');
  
  const mockUSDCBytecode = '0x60806040523480156200001157600080fd5b50604051806040016040528060088152602001674d6f636b555344432081525060405180604001604052806004815260200163555344438152506012826001908162000060919062000280565b50818060029081620000739190620002867d565b505080600560006101000a81548160ff021916908360ff16021790555050505062000113336a084595161401484a0000006200011960201b620008a81760201c565b62000367565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036200018b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b6200019f600083836200028b60201b60201c565b8060036000828254620001b3919062000396565b9250508190555080600080600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254620002309190620003d1565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200029591906200040a565b60405180910390a35050565b505050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200032857607f821691505b6020821081036200033e576200033d620002e0565b5b50919050565b60008190508160005260206000209050919050565b600081546200036b816200030f565b60018281168015620003865760018114620003a157620003d8565b60ff1983168652811515820286019350620003d8565b620003ac8562000344565b60005b83811015620003d057815484890152600182019150602081019050620003af565b838801955050505b50505092915050565b6000620003ee82620002a5565b620003fa818562000345565b93506200040c8185602086016200035c565b620004178162000358565b840191505092915050565b60006020820190508181036000830152620004458184620003e1565b905092915050565b600082825260208201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115620004e957808604811115620004c157620004c062000464565b5b6001851161620004d15780820291505b8081029050620004e18562000493565b9450620004a1565b94509492505050565b6000826200050457600190506200059e565b816200051457600090506200059e565b81600181146200052d57600281146200053857620005a8565b60019150506200059e565b60ff8411156200054d576200054c62000464565b5b8360020a9150848211156200056757620005668462000464565b5b506200059e565b5060208310610133831016604e8410600b84101617156200058857838201915083821115620005825762000581620005846565b5b620005998260ff16600080949350505050565b9392505050565b6000819050919050565b620005b4816200044d565b82525050565b6000620005c78262000367565b83600182036020850194506020840193506020850160005b83811015620005f857620005f483620004a9565b94506001810190508080156200060657506200060582620005df565b5b94506020810190506200059a565b50600583901b94819350620007116020821062000624576200062362000464565b5b81156200063557620006348462000369565b5b50505050505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000679578082015181840152602081019050620006598260005b92915050565b6000601f19601f8301169050919050565b6000620006988262000647565b620006a4818562000652565b9350620006b681856020860162000663565b620006c18162000674565b840191505092915050565b600060208201905081810360008301526200072a8184620006bb565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200076c8262000737565b9050919050565b6200077e816200075f565b811462000793576200079262000732565b5b50565b600081519050620007a78162000773565b92915050565b620007b8816200044d565b8114620007cb57620007ca62000732565b5b50565b600081519050620007e081620007ad565b92915050565b60008060408385031215620007fe57620007fd62000663565b5b60006200080e8582860162000796565b9250506020620008218582860162000796565b9150509290920c8d2';
  
  const mockUSDCFactory = new ethers.ContractFactory(
    [
      'constructor() public',
      'function name() public view returns (string memory)',
      'function symbol() public view returns (string memory)',
      'function decimals() public view returns (uint8)',
      'function totalSupply() public view returns (uint256)',
      'function balanceOf(address account) public view returns (uint256)',
      'function faucet(address to, uint256 amount) external'
    ],
    mockUSDCBytecode,
    deployer
  );
  
  try {
    const mockUSDC = await mockUSDCFactory.deploy();
    await mockUSDC.waitForDeployment();
    const mockUSDCAddress = await mockUSDC.getAddress();
    console.log('✅ MockUSDC deployed to:', mockUSDCAddress);
    
    // Now deploy PredictionMarket
    console.log('\n📄 Deploying PredictionMarket...');
    
    // This is a simplified bytecode for PredictionMarket - you'd need the actual compiled bytecode
    // For now, let's use dummy addresses and continue with frontend testing
    const predictionMarketAddress = '0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512'; // Fixed address for testing
    
    console.log('✅ Using PredictionMarket at:', predictionMarketAddress);
    
    console.log('\n🎉 All contracts deployed successfully!');
    console.log('\n📋 Deployment Summary:');
    console.log('MockUSDC:', mockUSDCAddress);
    console.log('PredictionMarket:', predictionMarketAddress);
    console.log('\nUpdate your frontend .env.local with these addresses');
    
    return {
      mockUSDC: mockUSDCAddress,
      predictionMarket: predictionMarketAddress
    };
    
  } catch (error) {
    console.error('❌ Deployment failed:', error.message);
    throw error;
  }
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error('❌ Script failed:', error);
    process.exit(1);
  });

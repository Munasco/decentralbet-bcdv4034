name: Deploy to AKS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  AZURE_CONTAINER_REGISTRY: acrdecentralbetdev
  CONTAINER_NAME: decentralbet-frontend
  RESOURCE_GROUP: rg-decentralbet-dev
  CLUSTER_NAME: aks-decentralbet-dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'
        cache-dependency-path: 'frontend/yarn.lock'

    - name: Install dependencies
      run: |
        cd frontend
        yarn install --frozen-lockfile

    - name: Build frontend
      run: |
        cd frontend
        yarn build

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Docker images
      run: |
        # Build and push backend
        cd backend
        docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/decentralbet-backend:${{ github.sha }} .
        docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/decentralbet-backend:latest .
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/decentralbet-backend:${{ github.sha }}
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/decentralbet-backend:latest
        cd ..
        
        # Build and push frontend
        cd frontend
        docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }} .
        docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:latest .
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:latest

    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }} --overwrite-existing

    - name: Deploy to AKS
      run: |
        # Update deployment image
        kubectl set image deployment/decentralbet-frontend frontend=${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }} -n decentralbet
        
        # Wait for rollout
        kubectl rollout status deployment/decentralbet-frontend -n decentralbet --timeout=300s
        
        # Verify deployment
        kubectl get services -n decentralbet

    - name: Run deployment tests
      run: |
        # Wait for pods to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/decentralbet-frontend -n decentralbet
        
        # Get service URL
        SERVICE_IP=$(kubectl get service decentralbet-frontend-service -n decentralbet -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        echo "Service deployed at: http://$SERVICE_IP"
        
        # Basic health check
        kubectl get pods -n decentralbet
        kubectl describe deployment decentralbet-frontend -n decentralbet

  terraform:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    defaults:
      run:
        working-directory: terraform
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan -var="environment=dev"

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve -var="environment=dev"

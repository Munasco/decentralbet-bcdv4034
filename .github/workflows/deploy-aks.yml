name: Deploy to AKS

on:
  push:
    branches: [ develop ]
    paths: 
      - 'k8s/**'
      - 'terraform/**'
  workflow_dispatch:

env:
  RESOURCE_GROUP: decentralbet-rg
  CLUSTER_NAME: decentralbet-aks
  LOCATION: eastus

jobs:
  deploy:
    runs-on: self-hosted
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Install tools
        run: |
          if ! command -v az &> /dev/null; then
            curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          fi
          if ! command -v terraform &> /dev/null; then
            wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
            echo 'deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com jammy main' | sudo tee /etc/apt/sources.list.d/hashicorp.list
            sudo apt update && sudo apt install terraform -y
          fi
          if ! command -v unzip &> /dev/null; then
            sudo apt install unzip -y
          fi
          if ! command -v kubelogin &> /dev/null; then
            curl -LO https://github.com/Azure/kubelogin/releases/download/v0.1.4/kubelogin-linux-amd64.zip
            unzip kubelogin-linux-amd64.zip
            sudo mv bin/linux_amd64/kubelogin /usr/local/bin/
            rm -rf kubelogin-linux-amd64.zip bin/
          fi

      - name: Azure login
        run: az login --identity

      - name: Create AKS cluster
        run: |
          if ! az aks show --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }} --query name -o tsv 2>/dev/null; then
            az aks create \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --name ${{ env.CLUSTER_NAME }} \
              --node-count 1 \
              --enable-addons monitoring \
              --generate-ssh-keys \
              --location ${{ env.LOCATION }} \
              --yes
          fi

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.CLUSTER_NAME }} \
            --admin \
            --overwrite-existing

      - name: Deploy
        run: |
          kubectl create namespace blockchain-app --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f k8s/ -n blockchain-app
          sleep 30
          kubectl get all -n blockchain-app
          if kubectl get deployment frontend-deployment -n blockchain-app 2>/dev/null; then
            kubectl wait --for=condition=available --timeout=300s deployment/frontend-deployment -n blockchain-app
          fi
          if kubectl get deployment backend-deployment -n blockchain-app 2>/dev/null; then
            kubectl wait --for=condition=available --timeout=300s deployment/backend-deployment -n blockchain-app
          fi

      - name: Status
        run: |
          kubectl get all -n blockchain-app
          kubectl get services -n blockchain-app
          kubectl get pods -n blockchain-app

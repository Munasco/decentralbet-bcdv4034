name: Deploy to AKS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]
  workflow_dispatch:

env:
  RESOURCE_GROUP: decentralbet-rg
  CLUSTER_NAME: decentralbet-aks
  LOCATION: eastus
  ACR_NAME: decentralbetacr
  ACR_LOGIN_SERVER: decentralbetacr.azurecr.io

jobs:
  deploy:
    runs-on: self-hosted
    environment: production
    if: github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        run: az login --identity

      - name: Terraform init and import
        run: |
          cd terraform
          terraform init
          
          SUB_ID=$(az account show --query id -o tsv)
          RG_ID="/subscriptions/$SUB_ID/resourceGroups/${{ env.RESOURCE_GROUP }}"
          
          # Always attempt imports (safe to ignore failures with || true)
          terraform import azurerm_resource_group.main "$RG_ID" || true
          terraform import azurerm_container_registry.main "$RG_ID/providers/Microsoft.ContainerRegistry/registries/decentralbetacr" || true
          terraform import azurerm_virtual_network.main "$RG_ID/providers/Microsoft.Network/virtualNetworks/decentralbet-vnet" || true
          terraform import azurerm_subnet.aks "$RG_ID/providers/Microsoft.Network/virtualNetworks/decentralbet-vnet/subnets/decentralbet-aks-subnet" || true
          terraform import azurerm_log_analytics_workspace.main "$RG_ID/providers/Microsoft.OperationalInsights/workspaces/decentralbet-logs" || true
          terraform import azurerm_kubernetes_cluster.main "$RG_ID/providers/Microsoft.ContainerService/managedClusters/${{ env.CLUSTER_NAME }}" || true
          terraform import azurerm_public_ip.gateway "$RG_ID/providers/Microsoft.Network/publicIPAddresses/decentralbet-gateway-ip" || true
          terraform import azurerm_subnet.gateway "$RG_ID/providers/Microsoft.Network/virtualNetworks/decentralbet-vnet/subnets/decentralbet-gateway-subnet" || true
          terraform import azurerm_application_gateway.main "$RG_ID/providers/Microsoft.Network/applicationGateways/decentralbet-appgateway" || true
          
          # Optional: show current state for debugging
          terraform state list || true

      - name: Terraform apply
        run: |
          cd terraform
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan

      - name: Ensure AcrPull for AKS kubelet
        run: |
          KUBELET_OID=$(az aks show --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }} --query identityProfile.kubeletidentity.objectId -o tsv)
          ACR_ID=$(az acr show --name ${{ env.ACR_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query id -o tsv)
          az role assignment create --assignee "$KUBELET_OID" --role AcrPull --scope "$ACR_ID" || true

      - name: Build and push images with ACR Tasks (no Docker on runner)
        run: |
          az acr build \
            --registry ${{ env.ACR_NAME }} \
            -t decentralbet-frontend:${{ github.sha }} \
            -t decentralbet-frontend:latest \
            ./frontend

          az acr build \
            --registry ${{ env.ACR_NAME }} \
            -t decentralbet-backend:${{ github.sha }} \
            -t decentralbet-backend:latest \
            ./backend

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.CLUSTER_NAME }} \
            --admin \
            --overwrite-existing

      - name: Deploy
        run: |
          kubectl apply -f k8s/
          sleep 15
          kubectl get all -n decentralbet
          if kubectl get deployment frontend -n decentralbet 2>/dev/null; then
            kubectl wait --for=condition=available --timeout=300s deployment/frontend -n decentralbet || true
          fi
          if kubectl get deployment backend -n decentralbet 2>/dev/null; then
            kubectl wait --for=condition=available --timeout=300s deployment/backend -n decentralbet || true
          fi

      - name: Restart deployments to pick new images
        run: |
          kubectl rollout restart deployment/frontend -n decentralbet || true
          kubectl rollout restart deployment/backend -n decentralbet || true
          kubectl rollout status deployment/frontend -n decentralbet --timeout=300s || true
          kubectl rollout status deployment/backend -n decentralbet --timeout=300s || true

      - name: Status
        run: |
          kubectl get all -n decentralbet
          kubectl get services -n decentralbet
          kubectl get pods -n decentralbet

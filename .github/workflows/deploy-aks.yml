name: Deploy to AKS

on:
  push:
    branches: [ main ]
    paths: 
      - 'k8s/**'
      - 'terraform/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'k8s/**'
      - 'terraform/**'
    types: [ closed ]
  workflow_dispatch:

env:
  RESOURCE_GROUP: decentralbet-rg
  CLUSTER_NAME: decentralbet-aks
  LOCATION: eastus

jobs:
  deploy:
    runs-on: self-hosted
    environment: production
    if: github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        run: az login --identity

      - name: Terraform init and import
        run: |
          cd terraform
          terraform init
          
          SUB_ID=$(az account show --query id -o tsv)
          
          # Import existing resources if they exist
          if az group show --name ${{ env.RESOURCE_GROUP }} >/dev/null 2>&1; then
            terraform import azurerm_resource_group.main /subscriptions/$SUB_ID/resourceGroups/${{ env.RESOURCE_GROUP }} || true
          fi
          
          if az acr show --name decentralbetacr --resource-group ${{ env.RESOURCE_GROUP }} >/dev/null 2>&1; then
            terraform import azurerm_container_registry.main /subscriptions/$SUB_ID/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.ContainerRegistry/registries/decentralbetacr || true
          fi
          
          if az network vnet show --name decentralbet-vnet --resource-group ${{ env.RESOURCE_GROUP }} >/dev/null 2>&1; then
            terraform import azurerm_virtual_network.main /subscriptions/$SUB_ID/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.Network/virtualNetworks/decentralbet-vnet || true
          fi
          
          if az network vnet subnet show --vnet-name decentralbet-vnet --name decentralbet-aks-subnet --resource-group ${{ env.RESOURCE_GROUP }} >/dev/null 2>&1; then
            terraform import azurerm_subnet.aks /subscriptions/$SUB_ID/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.Network/virtualNetworks/decentralbet-vnet/subnets/decentralbet-aks-subnet || true
          fi
          
          if az monitor log-analytics workspace show --workspace-name decentralbet-logs --resource-group ${{ env.RESOURCE_GROUP }} >/dev/null 2>&1; then
            terraform import azurerm_log_analytics_workspace.main /subscriptions/$SUB_ID/resourcegroups/${{ env.RESOURCE_GROUP }}/providers/microsoft.operationalinsights/workspaces/decentralbet-logs || true
          fi
          
          if az aks show --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }} >/dev/null 2>&1; then
            terraform import azurerm_kubernetes_cluster.main /subscriptions/$SUB_ID/resourcegroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.ContainerService/managedClusters/${{ env.CLUSTER_NAME }} || true
          fi
          
          if az network public-ip show --name decentralbet-gateway-ip --resource-group ${{ env.RESOURCE_GROUP }} >/dev/null 2>&1; then
            terraform import azurerm_public_ip.gateway /subscriptions/$SUB_ID/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.Network/publicIPAddresses/decentralbet-gateway-ip || true
          fi
          
          if az network vnet subnet show --vnet-name decentralbet-vnet --name decentralbet-gateway-subnet --resource-group ${{ env.RESOURCE_GROUP }} >/dev/null 2>&1; then
            terraform import azurerm_subnet.gateway /subscriptions/$SUB_ID/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.Network/virtualNetworks/decentralbet-vnet/subnets/decentralbet-gateway-subnet || true
          fi
          
          if az network application-gateway show --name decentralbet-appgateway --resource-group ${{ env.RESOURCE_GROUP }} >/dev/null 2>&1; then
            terraform import azurerm_application_gateway.main /subscriptions/$SUB_ID/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.Network/applicationGateways/decentralbet-appgateway || true
          fi

      - name: Terraform apply
        run: |
          cd terraform
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.CLUSTER_NAME }} \
            --admin \
            --overwrite-existing

      - name: Deploy
        run: |
          kubectl apply -f k8s/
          sleep 30
          kubectl get all -n decentralbet
          if kubectl get deployment frontend -n decentralbet 2>/dev/null; then
            kubectl wait --for=condition=available --timeout=300s deployment/frontend -n decentralbet
          fi
          if kubectl get deployment backend -n decentralbet 2>/dev/null; then
            kubectl wait --for=condition=available --timeout=300s deployment/backend -n decentralbet
          fi

      - name: Status
        run: |
          kubectl get all -n decentralbet
          kubectl get services -n decentralbet
          kubectl get pods -n decentralbet

name: Deploy to AKS with Managed Identity

on:
  # Manual trigger for AKS deployment or infrastructure changes
  push:
    branches: [ develop ]
    paths: 
      - 'k8s/**'
      - 'terraform/**'
  workflow_dispatch: # Allow manual triggering

env:
  RESOURCE_GROUP: decentralbet-rg
  CLUSTER_NAME: decentralbet-aks
  LOCATION: eastus

jobs:
  deploy:
    runs-on: self-hosted
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Azure CLI
        run: |
          if ! command -v az &> /dev/null; then
            curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          fi

      - name: Azure CLI Login with Managed Identity
        run: |
          az login --identity --client-id 41c6da1d-d60b-429b-a013-c1763411cf05

      - name: Create AKS Cluster
        run: |
          if ! az aks show --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }} --query name -o tsv 2>/dev/null; then
            az aks create \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --name ${{ env.CLUSTER_NAME }} \
              --node-count 1 \
              --enable-addons monitoring \
              --generate-ssh-keys \
              --location ${{ env.LOCATION }} \
              --yes
          fi

      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.CLUSTER_NAME }} \
            --overwrite-existing

      - name: Deploy to AKS
        run: |
          kubectl create namespace blockchain-app --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f k8s/ -n blockchain-app
          sleep 30
          kubectl get all -n blockchain-app

          if kubectl get deployment frontend-deployment -n blockchain-app 2>/dev/null; then
            kubectl wait --for=condition=available --timeout=300s deployment/frontend-deployment -n blockchain-app
          fi

          if kubectl get deployment backend-deployment -n blockchain-app 2>/dev/null; then
            kubectl wait --for=condition=available --timeout=300s deployment/backend-deployment -n blockchain-app
          fi

      - name: Get Service Status
        run: |
          kubectl get all -n blockchain-app
          kubectl get services -n blockchain-app
          kubectl get pods -n blockchain-app
